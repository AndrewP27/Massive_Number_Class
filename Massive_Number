 public class Massive_Number
    {

        /////////////

        // Digits order is ones place at 0, tens at 1 etc...

        List<sbyte> Digits = new List<sbyte>();
        public static sbyte DigitLimit = 10;

        public Massive_Number(int aValue)
        {
            int remainingValue;

            remainingValue = aValue;

            if (remainingValue == 0)
                Digits.Add(0);

            while (remainingValue != 0)
            {
                sbyte newDigit = (sbyte) (remainingValue % DigitLimit);
                Digits.Add(newDigit);
                remainingValue = (int) (remainingValue/ DigitLimit);
            }
        }

        public Massive_Number(List<sbyte> aDigitSet)
        {
            Digits = aDigitSet;
        }

        public Massive_Number copy()
        {
            return new Massive_Number(Digits);
        }

        public int isPositive()
        {
            resolveNegatives();
            foreach (sbyte i in Digits)
            {
                if (i > 0)
                    return 1;
                else if (i < 0)
                    return -1;
            }
            return 0;
        }

        public void removeDigit()
        {
            if(Digits.Count() <= 1)
            {
                Digits.Clear();
                Digits.Add(0);
            }
            else
            {
                Digits.RemoveAt(Digits.Count - 1);
            }
        }


        public Massive_Number add( Massive_Number a2)
        {

            sbyte carryOnValue = 0;

            int place_Count = 0;

            List<sbyte> DigitsA1 = Digits;
            List<sbyte> DigitsA2 = a2.Digits;


            List<sbyte> newSet = new List<sbyte>();

            while (DigitsA1.Count > place_Count && DigitsA2.Count > place_Count)
            {
                sbyte newVal = (sbyte)(DigitsA1.ElementAt(place_Count) + DigitsA2.ElementAt(place_Count) + carryOnValue);
                
                newSet.Add((sbyte)(newVal % DigitLimit));

                carryOnValue =(sbyte)(newVal / DigitLimit);

                place_Count++;
            }

            while((DigitsA1.Count > place_Count || DigitsA2.Count > place_Count))
            {
                if(DigitsA1.Count > place_Count)
                {
                    sbyte newVal = (sbyte)(DigitsA1.ElementAt(place_Count) + carryOnValue);

                    newSet.Add((sbyte)(newVal % DigitLimit));

                    carryOnValue = (sbyte)(newVal / DigitLimit);
                }
                else
                {
                    sbyte newVal = (sbyte)(DigitsA2.ElementAt(place_Count) + carryOnValue);

                    newSet.Add((sbyte)(newVal % DigitLimit));

                    carryOnValue = (sbyte)(newVal / DigitLimit);
                }

                place_Count++;
            }

            if (carryOnValue != 0)
                newSet.Add(carryOnValue);

            Massive_Number output = new Massive_Number(newSet);
            output.resolveNegatives();
            return output;
        }

        public Massive_Number subtract( Massive_Number a2)
        {

            List<sbyte> Digits = a2.Digits.ToList<sbyte>();

            for (int i = 0; i < Digits.Count; i++)
            {
                Digits[i] = (sbyte)(-Digits[i]);
            }

            return add(new Massive_Number(Digits));
        }

        public Massive_Number add(int a2)
        {
            return add(new Massive_Number(a2));
        }

        public Massive_Number subtract(int a2)
        {
            return  subtract(new Massive_Number(a2));
        }

        private void resolveNegatives()
        {
            if (Digits.Count == 0)
            {
                Digits = new List<sbyte>();
                return;
            }

            bool isFlipped = false;

            if (Digits.ElementAt(Digits.Count - 1) < 0)
            {
                isFlipped = true;

                for (int i = 0; i < Digits.Count; i++)
                {
                    Digits[i] = (sbyte)(-Digits[i]);
                }
            }

            sbyte persistant = 0;

            for (int i = 0; i < Digits.Count; i++)
            {
                Digits[i] += persistant;
                if (Digits[i] < 0)
                {
                    persistant = -1;
                    Digits[i] = (sbyte)(10 + Digits[i]);
                }
                else
                    persistant = 0;
            }

            if (isFlipped)
            {
                for (int i = 0; i < Digits.Count; i++)
                {
                    Digits[i] = (sbyte)(-Digits[i]);
                }
            }

            int testCount = Digits.Count - 1;

            while (Digits[testCount] == 0 && testCount != 0)
                Digits.RemoveAt(testCount--);

        }

        public override string ToString()
        {
            resolveNegatives();
            List<sbyte> DigitsReverse = Digits.ToList<sbyte>();

            bool hasFlipped = false;

            if (DigitsReverse[0] < 0)
            {
                hasFlipped = true;
                for (int i = 0; i < Digits.Count; i++)
                {
                    DigitsReverse[i] = (sbyte)(-Digits[i]);
                }
            }

            DigitsReverse.Reverse();
            string output = "";

            if (hasFlipped)
                output += "-";

            int counter = 0;
            int size = DigitsReverse.Count;


            foreach (sbyte i in DigitsReverse)
            {
                if (counter % 3 == size % 3 && counter != 0)
                    output += ",";
                output += i.ToString();
                
                counter++;
            }

            return output;
        }
        
    }
